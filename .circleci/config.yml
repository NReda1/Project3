version: 2.1



commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/4xPgQ1dYCQSjuE4hArUWFX//migration_${CIRCLE_WORKFLOW_ID:0:7})

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
             cd frontend
             npm install
             npm run build:prod
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
             cd frontend
             npm install
             npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
             cd backend
             npm install
             npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
             
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "install packages"
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      -  run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > inventory.txt
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - inventory.txt
      -  run:
           command: |
             pwd
             ls
             cat inventory.txt
             

      - destroy-environment

  configure-infrastructure:
    docker: 
      - image: python:3.11.0rc1-alpine3.16
      
    steps:
      - checkout
      
      - add_ssh_keys:
          fingerprints: ["83:7e:bb:78:07:17:1a:8f:9b:fb:96:6f:d0:18:0b:3e"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add ansible gzip tar 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            cat ../../inventory.txt
            ansible-playbook -i ../../inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: noura1990/myrepo
      
    steps:
      - checkout
      
      - run:
           name: Run migrations
           command: |
             cd backend
                echo NODE_ENV=production >> .env
                echo TYPEORM_CONNECTION=postgres >> .env
                echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
                echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
                echo TYPEORM_HOST=$TYPEORM_HOST >> .env
                echo TYPEORM_PORT=$TYPEORM_PORT >> .env
                echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
                echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
                echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
             npm install
             npm run build
             # Run and save the migration output
             npm run migrations > migrations_dump.txt
             
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
             then
                curl https://kvdb.io/4xPgQ1dYCQSjuE4hArUWFX/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
             fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: noura1990/myrepo
      
    steps:
      - checkout
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build:prod
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: noura1990/myrepo
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["83:7e:bb:78:07:17:1a:8f:9b:fb:96:6f:d0:18:0b:3e"]
      
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            tar -czvf artifact.tar.gz dist/* package*
            cp /home/circleci/project/backend/artifact.tar.gz  ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
            ls ../.circleci/ansible/roles/deploy/
            cd ../.circleci/ansible/
            echo "[web]" > inventory.txt
            export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text )
            echo $TYPEORM_HOST >> inventory.txt
            pwd
            ls -larth
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: noura1990/myrepo
    steps:
      - checkout
      - run:

          name: Frontend smoke test.
          command: |
           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
           echo ${URL} 
           if curl -s ${URL} | grep "Welcome"
           then
               echo "It worked!"
               exit 0
           else
               echo "Rolling back"
               exit 1
           fi
      
      
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text )
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "API_URL = ${API_URL}"
           

      - run:
          name: Backend smoke test.
          command: |
           if curl -s --head ${API_URL}
           then
               echo "It worked!"
               exit 0
           else
               echo "Rolling back"
               exit 1
           fi

      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: noura1990/myrepo
    steps:
      - checkout
    
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment
      - revert-migrations
            
    
  cleanup:
    docker:
      - image: noura1990/myrepo
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl --insecure https://kvdb.io/4xPgQ1dYCQSjuE4hArUWFX/OldWorkflowID)
            echo OldWorkflowID: "${OldWorkflowID}"
            
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"       
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              
            
            fi




             
  
workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
       #  requires: [build-frontend]
      #- test-backend:
       #  requires: [build-backend]
      #- scan-frontend:
       #  requires: [build-frontend]
      #- scan-backend:
        #  requires: [build-backend]
      #- deploy-infrastructure:
       #  requires: [test-frontend, test-backend, scan-frontend, scan-backend]
        # filters:
         #   branches:
          #    only: [circleci-project-setup]
      #- configure-infrastructure:
       #  requires: [deploy-infrastructure]
      #- run-migrations:
       #  requires: [configure-infrastructure]
      #- deploy-frontend:
       #  requires: [run-migrations]
      #- deploy-backend:
       #  requires: [run-migrations]
      #- smoke-test:
       #  requires: [deploy-frontend,deploy-backend]
      #- cloudfront-update:
        # requires: [deploy-backend]

      - cleanup
       #  requires: [cloudfront-update]
       

      