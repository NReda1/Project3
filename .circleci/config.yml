version: 2.1



commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/4xPgQ1dYCQSjuE4hArUWFX//migration_${CIRCLE_WORKFLOW_ID:0:7})

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
             cd frontend
             npm install
             npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
             cd backend
             npm install
             npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
             
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "install packages"
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      -  run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > inventory.txt
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - inventory.txt
      -  run:
           command: |
             pwd
             ls
             cat inventory.txt
             

      - destroy-environment

  configure-infrastructure:
    docker: 
      - image: python:3.11.0rc1-alpine3.16
      
    steps:
      - checkout
      
      - add_ssh_keys:
          fingerprints: ["83:7e:bb:78:07:17:1a:8f:9b:fb:96:6f:d0:18:0b:3e"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add ansible gzip tar 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            cat ../../inventory.txt
            ansible-playbook -i ../../inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: noura1990/myrepo
      
    steps:
      - checkout
      
      - run:
           name: Run migrations
           command: |
             cd backend
             npm install
             npm run build
             # Run and save the migration output
             npm run migrations > migrations_dump.txt
             no_output_timeout: 30m
             pwd
             ls -larth
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
             then
                curl https://kvdb.io/4xPgQ1dYCQSjuE4hArUWFX/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
             fi
      - destroy-environment
      - revert-migrations
      
             
  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
         requires: [build-backend]
      #- scan-frontend:
      #   requires: [build-frontend]
      #- scan-backend:
      #    requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]
      - configure-infrastructure:
         requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
          

      